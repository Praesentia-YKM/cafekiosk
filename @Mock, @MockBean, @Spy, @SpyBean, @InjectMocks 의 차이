## **1. @Mock, @MockBean, @Spy, @SpyBean, @InjectMocks 의 차이**

> 크게 Spring 기반 테스트인지, Mockito 기반 테스트인지로 구분을 지을 수 있습니다.
그후 전체를 mocking화 시켜서 테스트할지, 아니면 일부만 mocking화 두고 나머지는 실체화하여 테스트할지 구분할 수 있습니다.
> 

- [ ]  **@MockBean**
    - **출처**: 스프링 부트에서 제공 (Spring Boot Test)
    - **역할**: 스프링 컨텍스트에 등록된 빈을 모의 객체로 대체합니다.
    - **사용 환경**: 스프링 기반 테스트에서 사용됩니다. (예: @SpringBootTest, @WebMvcTest)
    - 기능: 스프링 애플리케이션에서 사용하는 빈을 가짜 객체로 대체하여, 실제 빈 대신 모의 객체로 테스트를 수행합니다.
    - **사용 예시**:
        
        ```java
        @SpringBootTest
        public class UserServiceTest {
        
            @MockBean
            private UserRepository userRepository; // 스프링 컨텍스트의 UserRepository 빈을 Mock 객체로 대체
        
            @Autowired
            private UserService userService; // 실제 스프링 컨텍스트에서 관리되는 UserService 빈
        
            @Test
            public void testFindUserById() {
        		    // given
                // 모의 객체 설정: id가 1L일 때 "John Doe"라는 사용자를 반환하도록 설정
                when(userRepository.findById(1L)).thenReturn(Optional.of(new User(1L, "John Doe")));
        
                // when
                User user = userService.findUserById(1L);
        
                
                // then
                assertNotNull(user);
                assertEquals("John Doe", user.getName());
            }
        }
        
        ```
        
    - **설명**: @MockBean을 사용하여 userRepository를 모의 객체로 대체합니다. userService는 스프링 컨텍스트에서 관리되는 실제 빈이며, userRepository의 동작만을 모의 객체로 제어할 수 있습니다.
    - **스프링 컨텍스트의 특정 빈을 모의 객체로 바꾸기 때문에, 스프링 컨텍스트를 로드하는 테스트에서 의존성 주입을 통한 상호작용을 테스트할 때 유용합니다.**

---

- [ ]  **@Spy**
    - **출처**: Mockito 라이브러리에서 제공
    - **역할:** 스파이(Spy) 객체를 생성합니다.
    - **사용 환경:** 스프링 컨텍스트와 무관한 단위 테스트에서 사용됩니다.
    - **기능:** 실제 객체의 일부 메서드는 실제 동작을 유지하고, 특정 메서드만 가짜 동작으로 대체할 수 있습니다.
    - **사용 예시**:
        
        ```java
        @ExtendWith(MockitoExtension.class)
        public class UserServiceTest {
        
            @Spy
            private UserService userService = new UserService(new UserRepository()); // 실제 UserService 객체의 스파이 생성
        
            @Mock
            private UserRepository userRepository; // 가짜 UserRepository 생성
        
            @Test
            public void testFindUserByIdWithSpy() {
        	      // given
                // 특정 메서드의 동작만 가짜로 대체
                doReturn(new User(1L, "Mocked John Doe")).when(userService).findUserById(1L);
        
                // when
                User user = userService.findUserById(1L);
        
               // then
                assertEquals("Mocked John Doe", user.getName());
            }
        }
        
        ```
        
    - **설명**: @Spy를 사용하면 userService의 일부 메서드는 실제로 실행되고, 특정 메서드만 모의 동작으로 변경할 수 있습니다.
    - 스프링 컨텍스트를 사용하지 않으므로, 스프링 없이도 단순히 클래스 내부의 특정 로직을 테스트할 때 유용합니다.

---

- [ ]  @InjectMocks
    - **출처**: Mockito 라이브러리에서 제공
    - **역할**: @Mock이나 @Spy로 생성된 모의 객체를 테스트 대상 클래스에 주입합니다.
    - **사용 환경**: 단위 테스트에서, 의존성이 있는 클래스의 동작을 독립적으로 테스트할 때 사용됩니다.
    - **기능**: 모의 객체나 스파이 객체를 의존성으로 주입하여 테스트 대상 클래스를 생성합니다.
    - **사용 예시**:
        
        ```java
        @ExtendWith(MockitoExtension.class)
        public class UserServiceTest {
        
            @Mock
            private UserRepository userRepository; // UserRepository의 Mock 객체 생성
        
            @InjectMocks
            private UserService userService; // Mock된 UserRepository가 주입된 UserService 생성
        
            @Test
            public void testFindUserByIdWithMocks() {
        	      // given
                when(userRepository.findById(1L)).thenReturn(Optional.of(new User(1L, "John Doe")));
                
                // when
                User user = userService.findUserById(1L);
        
        				// then
                assertNotNull(user);
                assertEquals("John Doe", user.getName());
            }
        }
        
        ```
        
    - **설명**: @InjectMocks는 @Mock으로 생성된 userRepository를 **userService에 주입**합니다.
    - **스프링 없이 단순히 클래스 간의 의존성을 처리하여 테스트할 때 유용합니다.**

---

- [ ]  **@SpyBean**
    - **출처**: 스프링 부트에서 제공 (Spring Boot Test)
    - **역할**: 스프링 컨텍스트에 등록된 실제 빈을 스파이로 대체합니다.
    - **사용 환경**: 스프링 기반 테스트에서, 실제 빈의 동작을 일부만 가짜로 처리하고자 할 때 사용됩니다.
    - **기능**: 실제 스프링 빈의 동작을 유지하면서, 특정 메서드의 동작만 변경할 수 있습니다.
    - **사용 예시**:
        
        ```java
        @SpringBootTest
        public class UserServiceTest {
        
            @SpyBean
            private UserService userService; // 스프링 컨텍스트의 UserService 빈을 스파이로 대체
        
            @MockBean
            private UserRepository userRepository; // UserRepository는 Mock 객체로 대체
        
            @Test
            public void testFindUserByIdWithSpyBean() {
        	      // given
                // 메서드의 동작만 변경
                doReturn(new User(1L, "Mocked John Doe")).when(userService).findUserById(1L);
        
        		    // when
                User user = userService.findUserById(1L);
        
        	      // then
                assertEquals("Mocked John Doe", user.getName());
            }
        }
        
        ```
        
    - **설명**: @SpyBean은 userService의 실제 빈을 스파이 객체로 대체합니다. findUserById 메서드만 가짜로 동작하며, 다른 메서드는 실제 동작을 유지합니다.
    - 스프링 컨텍스트에서 관리되는 객체를 스파이로 사용하여, 특정 메서드만 모의 동작으로 처리할 때 유용합니다.

## 2. 아래 3개의 테스트에 대한 테스트 항목 배치

### setUp 배치

- 댓글은 없을 수 있으나, 사용자와 게시물은 선행되어야하는 필수 조건이므로 공통 setUp으로 분리하여 둡니다.
    
    > 사용자1 생성 (1-1, 2-1, 3-1)
    > 
    > 
    > 사용자2 생성 (3-3)
    > 
    > 게시물 생성 (1-3, 2-3, 3-5)
    > 

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/61a5c6bf-7a59-4970-897f-bce1b48b7ca4/a0c58fa3-7f45-4707-a7ce-3f74d991d766/image.png)

> **댓글을 생성하기 위한 데이터**가 필요
→댓글 생성을요청
> 
- **Given**:
    - 사용자1의 추가 데이터 설정 (`1-2`).
    - 댓글 작성에 필요한 내용 준비 (`1-5`).
- **When**:
    - 댓글 생성 (`1-6`).

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/61a5c6bf-7a59-4970-897f-bce1b48b7ca4/de6b40c0-7b13-40c6-9efd-bc306db88fd6/image.png)

> 댓글이 이미 존재하는 상태가 필요
→댓글 수정을 요청
> 
- **Given**:
    - 사용자1의 추가 데이터 설정 (`1-2`와 유사한 부분).
    - 댓글 작성에 필요한 내용 준비 (`2-5`).
    - 댓글 생성 (`2-6`).
- **When**:
    - 댓글 수정 요청 (`2-7`)

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/61a5c6bf-7a59-4970-897f-bce1b48b7ca4/90ab7f28-3b48-4bfa-9dd7-9ebf42bcb5d5/image.png)

> 두명의 사용자가 필요
사용자1 : 댓글을 작성하는 사람
사용자2: 댓글을 수정하려고 시도하는 사람

→ 사용자2가 사용자1의 댓글을 수정하려고 시도
→ 추가로 검증할때 예외를 발생시킬 수 있어보입니다.
> 
- **Given**:
    - 사용자1의 추가 데이터 설정 (`3-2`와 유사한 부분).
    - 사용자1의 댓글 작성 준비 (`3-7`).
    - 사용자1의 댓글 생성 (`3-8`).
- **When**:
    - 사용자2가 사용자1의 댓글 수정 시도 (`3-9`).
